
# Service Account for Ingress Gateway
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ingressgateway

---
# Role for istio-ingressgateway
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istio-ingressgateway
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]

---
# Role Biding for istio-ingressgateway
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istio-ingressgateway
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-ingressgateway
subjects:
- kind: ServiceAccount
  name: istio-ingressgateway

---
# Deployment for Ingress Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-ingressgateway
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: istio-ingressgateway
      istio: ingressgateway
  template:
    metadata:
      annotations:
        # This is required to tell Anthos Service Mesh to inject the gateway with the
        # required configuration.
        inject.istio.io/templates: gateway
      labels:
        app: istio-ingressgateway
        istio: ingressgateway
    spec:
      containers:
      - name: istio-proxy
        image: auto # The image will automatically update each time the pod starts.
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 128Mi
      serviceAccountName: istio-ingressgateway

---
# Optional: PodDisruptionBudget will instruct Kubernetes to ensure at least 1 replica
# is available when possible
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: istio-ingressgateway
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      istio: ingressgateway
      app: istio-ingressgateway
---
# Optional: HorizontalPodAutoscaler will automatically scale the gateway replica count based on
# CPU utilization
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-ingressgateway
spec:
  minReplicas: 2
  maxReplicas: 8
  targetCPUUtilizationPercentage: 50
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: istio-ingressgateway

---
# Service for Ingress Gateway
apiVersion: v1
kind: Service
metadata:
  name: istio-ingressgateway
  # annotations:
  #   networking.gke.io/load-balancer-type: "Internal"    
  labels:
    app: istio-ingressgateway
    istio: ingressgateway
spec:
  ports:
  # status-port exposes a /healthz/ready endpoint that can be used with GKE Ingress health checks
  - name: status-port
    port: 15021
    protocol: TCP
    targetPort: 15021
  # Any ports exposed in Gateway resources should be exposed here.
  - name: http2
    port: 80
  - name: https
    port: 443
  - name: tracker-http
    port: 8000
    protocol: TCP
    targetPort: 8000
  - name: tracker-tcp
    port: 8008
    protocol: TCP
    targetPort: 8008
  selector:
    istio: ingressgateway
    app: istio-ingressgateway
  type: LoadBalancer